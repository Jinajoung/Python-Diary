{
  
    
        "post0": {
            "title": "Title",
            "content": ". menu = {&#39;아메리카노&#39;,&#39;카페라떼&#39;,&#39;카푸치노&#39;} menu . {&#39;아메리카노&#39;, &#39;카페라떼&#39;, &#39;카푸치노&#39;} . &#48152;&#48373;&#44396;&#51312; . #-주어진 자료를 순회할 때 주로 사용되는 반복 구조이다. # 반복의 범위가 미리 정해진다. #for 제어변수 in 시퀀스: #명령문 . i = 1 while i&lt;=5: i = i+1 # 루프의 조건식은 while문 안에서 변경되어야 함. print(i,end=&#39; &#39;) . 2 3 4 5 6 . for i in range(1,6): print(i,end=&#39; &#39;) . 1 2 3 4 5 . i = 1 while i&lt;=5: print(i) print(&quot;끝&quot;) . num = 0 sum1 = 0 while num != 99: num = int(input(&#39;숫자를 입력하세요:&#39;)) sum1 += num print(sum1) . 숫자를 입력하세요:11 11 숫자를 입력하세요:2 13 숫자를 입력하세요:3 16 숫자를 입력하세요:99 115 . sum1 = 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): sum1 += int(input(&#39;정수입력:&#39;)) print(&#39;합계출력:&#39;,sum1) . 몇개의 숫자를 더할까요? :5 정수입력:33 정수입력:22 정수입력:66 정수입력:77 정수입력:1 합계출력: 199 . sum = 0 for i in range(5): sum += int(input(&#39;정수입력:&#39;)) print(&#39;합계출력:&#39;,sum) . 정수입력:1 정수입력:2 정수입력:3 정수입력:4 정수입력:5 합계출력: 15 . i = 1 while i&lt;=5: i = i+1 print(i,end=&#39; &#39;) . 2 3 4 5 6 . n = int(input(&#39;몇번을 더하는 거야?:&#39;)) sum1 = 0 for i in range(n): sum1 += int(input(&#39;정수입력&#39;)) print(&#39;합계출력:&#39;,sum1) . 몇번을 더하는 거야?:2 정수입력40 정수입력100 합계출력: 140 . i=0 sum1=0 n=int(input(&#39;몇 개의 숫자를 구할까요?:&#39;)) ​ while i&lt;n: num=int(input(&#39;정수입력: &#39;)) i+=1 sum1+=num print(f&#39;합계는 {sum1}입니다&#39;) . n = int(input(&#39;몇개의 숫자를 구할래?&#39;)) sum1 = 0 for i in range(n): num = int(input(&#39;정수입력:&#39;)) if num % 2 == 0: sum1 += num print(&#39;합계출력:&#39;,sum1) . 몇개의 숫자를 구할래?1 정수입력:2 합계출력: 2 . sum1 = 0 num = int(input(&quot;숫자:&quot;)) while num != 0: sum1+=num num = int(input(&#39;숫자&#39;)) print(&quot;합계:&quot;,sum) . 숫자:2 숫자22 숫자1 숫자0 합계: 0 . num = 0 sum1 = 0 while num != 0: #num이 0이니까 그냥 끝나버림 num = int(input(&#39;숫자를 입력하세요:&#39;)) sum1 += num print(sum1) . sum1 = 0 n = int(input(&#39;1부터 몇까지 더할까요?:&#39;)) for i in range(1,n+1): sum1 += i print(i) print(f&#39;1부터 {n}까지 더한 합계는:&#39;,sum1) . 1부터 몇까지 더할까요?:4 1 2 3 4 1부터 4까지 더한 합계는: 10 . ​ i=0 result=0 n=int(input(&#39;몇 개의 숫자를 구할까요?: &#39;)) sign=str(input(&#39;어떤 연산을 할까요?: &#39;)) ​ while i&lt;n: #이거는 그냥 range(n)이랑 비슷한거임 num=int(input(&#39;정수입력: &#39;)) i+=1 if sign == &#39;+&#39;: result += num elif sign == &#39;-&#39;: result -= num elif sign == &#39;*&#39;: result *= num elif sign == &#39;/&#39;: result /= num ​ print(&#39;-&#39;*50) print(f&#39;결과는 {result}입니다&#39;) ​ # -연산을 할 경우 시작값이 0이라 음수만 나옴. 시작값을 넣고싶다면 첫 값을 음수(-a)로 입력해 양수로 바꿔야함. # result 초기값이 0이라 곱셈, 나눗셈 연산은 아무리해도 결과값이 0이 됨. &#39;&#39;으로 하면 str형식이 되서 int와 연산되지 않음. . result=0 n=int(input(&#39;1부터 몇까지 더할까요? : &#39;)) for i in range(1,n+1): result +=i print(&#39;-&#39;*50) print(f&#39;결과는 {result}입니다&#39;) . 1부터 몇까지 더할까요? : 3 -- 결과는 6입니다 . sum1 = 0 n1 = int(input(&#39;몇부터 더할까요?:&#39;)) n2 = int(input(&#39;몇까지 더할까요?:&#39;)) for i in range(n1,n2+1): sum1+=i print(f&#39;{n1}부터 {n2}까지 더한 합계는:&#39;,sum1) . 몇부터 더할까요?:3 몇까지 더할까요?:10 3부터 10까지 더한 합계는: 52 . n = int(input(&#39;입력받을 정수의 개수:&#39;)) sum1 = 0 for i in range(n): num = int(input(&#39;정수&#39;)) sum1 += num if n ==0: print(&#39;0개의 점수를 입력하셨습니다.&#39;) else: print(&#39;평균:&#39;,sum1/n) . 입력받을 정수의 개수:3 정수1 정수7 정수9 평균: 5.666666666666667 . n = int(input(&#39;몇 팩토리얼?:&#39;)) sum1 = 1 for i in range(n,0,-1): print(i) sum1 *= i print(f&#39;{n}! = {sum1}&#39;) . 몇 팩토리얼?:5 5 4 3 2 1 5! = 120 . n = int(input(&#39;구구단 몇단을 출력할까요?:&#39;)) for i in range(1,10): print(f&#39; {n} * {i} = {n*i}&#39;,end = &#39; &#39;) . 구구단 몇단을 출력할까요?:3 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9 3 * 4 = 12 3 * 5 = 15 3 * 6 = 18 3 * 7 = 21 3 * 8 = 24 3 * 9 = 27 . for i in range(2): # 0,1,2,3,4,까지의 범위 수행 for j in range(4): # 0,1,2,까지의 범위 수행 print(i,j) . 0 0 0 1 0 2 0 3 1 0 1 1 1 2 1 3 . for i in range(2): # 0,1,2,3,4,까지의 범위 수행 for j in range(4): # 0,1,2,까지의 범위 수행 print(i,j) . for i in range(2,10): for j in range(1,10): print(f&#39; {i} * {j} = {i*j}&#39;,end= &#39; t&#39;) print() . 2 * 1 = 2 2 * 2 = 4 2 * 3 = 6 2 * 4 = 8 2 * 5 = 10 2 * 6 = 12 2 * 7 = 14 2 * 8 = 16 2 * 9 = 18 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9 3 * 4 = 12 3 * 5 = 15 3 * 6 = 18 3 * 7 = 21 3 * 8 = 24 3 * 9 = 27 4 * 1 = 4 4 * 2 = 8 4 * 3 = 12 4 * 4 = 16 4 * 5 = 20 4 * 6 = 24 4 * 7 = 28 4 * 8 = 32 4 * 9 = 36 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 6 * 1 = 6 6 * 2 = 12 6 * 3 = 18 6 * 4 = 24 6 * 5 = 30 6 * 6 = 36 6 * 7 = 42 6 * 8 = 48 6 * 9 = 54 7 * 1 = 7 7 * 2 = 14 7 * 3 = 21 7 * 4 = 28 7 * 5 = 35 7 * 6 = 42 7 * 7 = 49 7 * 8 = 56 7 * 9 = 63 8 * 1 = 8 8 * 2 = 16 8 * 3 = 24 8 * 4 = 32 8 * 5 = 40 8 * 6 = 48 8 * 7 = 56 8 * 8 = 64 8 * 9 = 72 9 * 1 = 9 9 * 2 = 18 9 * 3 = 27 9 * 4 = 36 9 * 5 = 45 9 * 6 = 54 9 * 7 = 63 9 * 8 = 72 9 * 9 = 81 . for i in range(1,10): for j in range(2,10): print(f&#39; {i} * {j} = {i*j}&#39;,end= &#39; t&#39;) print() . 1 * 2 = 2 1 * 3 = 3 1 * 4 = 4 1 * 5 = 5 1 * 6 = 6 1 * 7 = 7 1 * 8 = 8 1 * 9 = 9 2 * 2 = 4 2 * 3 = 6 2 * 4 = 8 2 * 5 = 10 2 * 6 = 12 2 * 7 = 14 2 * 8 = 16 2 * 9 = 18 3 * 2 = 6 3 * 3 = 9 3 * 4 = 12 3 * 5 = 15 3 * 6 = 18 3 * 7 = 21 3 * 8 = 24 3 * 9 = 27 4 * 2 = 8 4 * 3 = 12 4 * 4 = 16 4 * 5 = 20 4 * 6 = 24 4 * 7 = 28 4 * 8 = 32 4 * 9 = 36 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 6 * 2 = 12 6 * 3 = 18 6 * 4 = 24 6 * 5 = 30 6 * 6 = 36 6 * 7 = 42 6 * 8 = 48 6 * 9 = 54 7 * 2 = 14 7 * 3 = 21 7 * 4 = 28 7 * 5 = 35 7 * 6 = 42 7 * 7 = 49 7 * 8 = 56 7 * 9 = 63 8 * 2 = 16 8 * 3 = 24 8 * 4 = 32 8 * 5 = 40 8 * 6 = 48 8 * 7 = 56 8 * 8 = 64 8 * 9 = 72 9 * 2 = 18 9 * 3 = 27 9 * 4 = 36 9 * 5 = 45 9 * 6 = 54 9 * 7 = 63 9 * 8 = 72 9 * 9 = 81 . t = &#39;I have a dream&#39; letter =input(&#39;찾을 문자:&#39;) for i in t: print(i,end=&quot; &quot;) if i == letter and cnt = 0: cnt = 1 else: break . File &#34;&lt;ipython-input-70-418e77ac5bac&gt;&#34;, line 6 if i == letter and cnt = 0: ^ SyntaxError: invalid syntax . import random k = random.randint(1,100) n = int(input(&#39;숫자 입력해:&#39;)) while k !=n: if n&lt;k: print(&quot;up&quot;) n = int(input(&#39;정답을 다시 맞춰보세요:&#39;)) elif n&gt;k: print(&quot;down&quot;) n = int(input(&#39;정답을 다시 맞춰보세요:&#39;)) print(&quot;정답!&quot;) . 숫자 입력해:4 up 정답을 다시 맞춰보세요:6 up 정답을 다시 맞춰보세요:90 down 정답을 다시 맞춰보세요:88 down 정답을 다시 맞춰보세요:60 down 정답을 다시 맞춰보세요:54 down 정답을 다시 맞춰보세요:35 down 정답을 다시 맞춰보세요:24 up 정답을 다시 맞춰보세요:26 정답! . import random num=random.randint(1,100) num2=int(input(&#39;정답을 맞춰보세요: &#39;)) while num != num2: if num &gt; num2: print(&#39;UP&#39;) num2=int(input(&#39;정답을 다시 맞춰보세요: &#39;)) elif num &lt; num2: print(&#39;DOWN&#39;) num2=int(input(&#39;정답을 다시 맞춰보세요: &#39;)) print(&#39;정답!!&#39;) . 정답을 맞춰보세요: 20 UP 정답을 다시 맞춰보세요: 23 UP 정답을 다시 맞춰보세요: 50 DOWN 정답을 다시 맞춰보세요: 44 DOWN 정답을 다시 맞춰보세요: 33 UP 정답을 다시 맞춰보세요: 36 UP 정답을 다시 맞춰보세요: 40 DOWN 정답을 다시 맞춰보세요: 39 정답!! .",
            "url": "https://jinajoung.github.io/Python-Diary/2021/06/06/_06_01_1%ED%8C%80_%EC%A0%95%EC%A7%84%EC%95%84.html",
            "relUrl": "/2021/06/06/_06_01_1%ED%8C%80_%EC%A0%95%EC%A7%84%EC%95%84.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jinajoung.github.io/Python-Diary/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jinajoung.github.io/Python-Diary/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jinajoung.github.io/Python-Diary/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jinajoung.github.io/Python-Diary/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}